package functions;

public class TabulatedFunction {
    private FunctionPoint[] points;
    private int countPoints;

    private int findNearestPoint(double x) {                   //find the closest point to the left     //поиск ближайшей точки слева
        int l = 0, r = this.countPoints - 1, m = (r - l) / 2;
        do {
            if (points[m].getX() > x) {
                r = m - 1;
            } else if (points[m].getX() < x) {
                l = m + 1;
            } else {
                return m;
            }
            m = (r + l) / 2;
        } while (r > l);
        return points[m].getX() > x ? m - 1 : m;
    }

    private void initializationArrOnX(double leftX, double rightX, int pointsCount) {   //a function for initialization array of point on coordinat X
        double step = pointsCount > 1 ? ((rightX - leftX) / (pointsCount - 1)) : 0;     //variable for calculating the next of the point X         //переменная для посчета след точки Х

        this.points[pointsCount - 1] = new FunctionPoint(rightX, 0);             //for exact match of the definition area                    //для точности совпадения области определения

        for (int i = 0; i < pointsCount /*- 1*/; ++i) {
            this.points[i] = new FunctionPoint(leftX + i * step, 0);            // assigning values to a point by X only                    //присваивание значений точке только по Х
        }
    }

    private boolean checkInterval(int index, double x) {
        return (index > 0 && index < this.countPoints - 1) && (this.points[index - 1].getX() < x && x < this.points[index + 1].getX());  //the point is in the interval and the index is not extreme //точка находится в интервале и индекс не является крайним
    }

    public TabulatedFunction(double leftX, double rightX, int pointsCount) {

        //if(leftX > rightX) //ask about it
        this.countPoints = pointsCount;
        this.points = new FunctionPoint[this.countPoints];          //create an array of points with the number of pointCount   //создание массива из точек количеством pointCount
        initializationArrOnX(leftX, rightX, pointsCount);
    }

    public TabulatedFunction(double leftX, double rightX, double[] values) {
        this.countPoints = values.length;
        this.points = new FunctionPoint[this.countPoints];
        initializationArrOnX(leftX, rightX, this.countPoints);

        for (int j = 0; j < this.countPoints; ++j) {
            this.points[j].setY(values[j]);                   // assigning values to a point by Y only                    //присваивание значений точке только по Y
        }
    }

    public double getLeftDomainBorder() {
        return this.points[0].getX();                    //return the value of the left boundary of the definition area  //возвращает значение левой границы области определения
    }

    public double getRightDomainBorder() {
        return this.points[this.countPoints - 1].getX();   //return the value of the right boundary of the definition area  //возвращает значение правой границы области определения
    }

    public double getFunctionValue(double x) {
        if (x >= this.getLeftDomainBorder() && x <= this.getRightDomainBorder()) {  //check for output from the field definition    //проверка на выход из области определения
            int i = findNearestPoint(x);

            if (i == this.countPoints - 1) {                                //special case of index(end of array)   //специфльный случай индекса конец массива)
                return this.points[i].getY();
            }

            double x1 = this.points[i].getX();                              //for easier access             //для более простого доступа
            double y1 = this.points[i].getY();
            double x2 = this.points[i + 1].getX();
            double y2 = this.points[i + 1].getY();

            double ans = y1 + ((x - x1) * (y2 - y1)) / (x2 - x1);           //calculate the value of the function
            return ans;
        }
        return Double.NaN;
    }

    public int getPointCount() {
        return this.countPoints;
    }


    /**
     * index from 0 to n - 1
     */
    public FunctionPoint getPoint(int index) {
        return new FunctionPoint(this.points[index]);
    }

    /**
     * index from 0 to n - 1
     */
    public void setPoint(int index, FunctionPoint point) {
        if (checkInterval(index, point.getX())) {
            //the point is in the interval between adjacent points on the index   //точка находится в интервале меж соседних точек по индексу
            this.points[index] = new FunctionPoint(point);

        }
    }

    /**
     * index from 0 to n - 1r
     */
    public double getPointX(int index) {
        return points[index].getX();
    }

    /**
     * index from 0 to n - 1
     */
    public double getPointY(int index) {
        return points[index].getY();
    }

    /**
     * index from 0 to n - 1
     */
    public void setPointX(int index, double x) {
        if (checkInterval(index, x)) {
            points[index].setX(x);
        }
    }

    /**
     * index from 0 to n - 1
     */
    public void setPointY(int index, double y) {
        points[index].setY(y);
    }

    /**
     * index from 0 to n - 1
     */
    public void deletePoint(int index) {
        System.arraycopy(this.points, index + 1, this.points, index, this.countPoints - 1 - index);
        --this.countPoints;
        this.points[this.countPoints] = null;
    }

    public void addPoint(FunctionPoint point) {
        if (this.points.length - countPoints > 0) {                         //если есть место в массиве
            if (point.getX() < this.getLeftDomainBorder()) {                //если точка за левой границей
                System.arraycopy(this.points, 0, this.points, 1, countPoints);  //сдвинуть массив на 1
                this.points[0] = point;                                                         //положить точку в начало
            } else if (this.getRightDomainBorder() < point.getX()) {        //если точка за правой границей
                this.points[countPoints] = point;                                //добавить точку
            } else {                                                            //точка лежит в пределах границ масссива
                int index = findNearestPoint(point.getX());                     //ищем ближайшую точку слева(её индекс)
                if (this.points[index].getX() - point.getX() <= Double.MIN_VALUE) {       //если эта точка совпадает с той, что есть в массиве
                    this.setPointY(index, point.getY());                                //то меняем значение функции и размер не меняем
                    return;
                }
                System.arraycopy(this.points, index + 1, this.points, index + 2, countPoints - index);        //сдвигаем массив на 1 начиная после точки с индекса
                this.points[index + 1] = point;
            }
        } else {
            FunctionPoint newPoints[] = new FunctionPoint[countPoints + 10];          //нет в массиве места НУЖНО БОЛЬШЕ МЕСТА!
            if (point.getX() < this.getLeftDomainBorder()) {                               //если точка за левой границей
                System.arraycopy(this.points, 0, newPoints, 1, countPoints);       //копировать массив в новый оставив в начале место
                newPoints[0] = point;                                                           //положить точку в начало
            } else if (this.getRightDomainBorder() < point.getX()) {                            //если точка за правой границей
                System.arraycopy(this.points, 0, newPoints, 0, countPoints);         //копируем массив
                newPoints[countPoints] = point;                                                //кладем точку в конец
            } else {
                int index = findNearestPoint(point.getX());                                 //ищем ближайшую точку слева(её индекс)
                if (this.points[index].getX() - point.getX() < Double.MIN_VALUE) {            //если эта точка совпадает с той, что есть в массиве
                    this.setPointY(index, point.getY());                                    //то меняем значение функции и размер не меняем
                    return;
                }
                System.arraycopy(this.points, 0, newPoints, 0, index + 1);      //копируем первую часть массива
                newPoints[index + 1] = point;                                                        //вставляем точку
                System.arraycopy(this.points, index + 1, newPoints, index + 2, countPoints - index - 1);     //копируем остаток
            }
            this.points = newPoints;
        }
        ++this.countPoints;
    }

    public void printTabulatedFunction() {
        int i = 1;
        while (i <= this.countPoints) {
            int p = i + 9 < this.countPoints ? i + 9 : this.countPoints, j = i;
            System.out.print("" + i + '-' + p + '\n' + " x:  ");
            for (; i <= p; ++i) {
                System.out.print(this.points[i - 1].getX() + " ");
            }
            System.out.print("\n y:  ");
            for (; j <= p; ++j) {
                System.out.print(this.points[j - 1].getY() + " ");
            }
            System.out.println();
        }
    }
}
